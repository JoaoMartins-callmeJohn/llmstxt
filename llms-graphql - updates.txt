# Autodesk APS GraphQL Documentation - AEC Data Model 

> The AEC Data Model API is a GraphQL-based API that provides the ability to directly interact with granular AEC data in the cloud without the need of building custom plug-ins for the desktop authoring tools like Revit, Civil 3D, Plant3D and other AEC connected design applications.

## ‚ö†Ô∏è CRITICAL: Official API Endpoint

**THE ONLY CORRECT ENDPOINT IS:**
```
https://developer.api.autodesk.com/aec/graphql
```

**Do not use any other endpoints - they will not work!**

## Table of Contents

### üö® [ENDPOINT REFERENCE - CRITICAL INFORMATION](#endpoint-reference---critical-information)

### 1. [Getting Started](#getting-started)
   - [Overview](#overview)
   - [Prerequisites](#prerequisites)
   - [Terms of Service](#terms-of-service)
   - [Onboarding](#onboarding)
   - [Quick Start Guide](#quick-start-guide)

### 2. [Core Concepts](#core-concepts)
   - [About GraphQL](#about-graphql)
   - [API Constructs](#api-constructs)
   - [API Capabilities](#api-capabilities)
   - [Region Support](#region-support)

### 3. [API Usage](#api-usage)
   - [Authentication](#authentication)
   - [Endpoints](#endpoints)
   - [Making Requests](#making-requests)
   - [Rate Limits](#rate-limits)

### 4. [Filtering and Querying](#filtering-and-querying)
   - [Standard Filtering](#standard-filtering)
   - [Advanced Filtering (RSQL)](#advanced-filtering-rsql)
   - [Pagination](#pagination)
   - [Distinct Values](#distinct-values)

### 5. [Tutorials](#tutorials)
   - [Basic Operations](#basic-operations)
   - [Advanced Querying](#advanced-querying)
   - [Working with Element Groups](#working-with-element-groups)
   - [Property and Reference Management](#property-and-reference-management)

### 6. [API Reference](#api-reference)
   - [Object Field Reference](#object-field-reference)
   - [Query Building Patterns](#query-building-patterns)
   - [Field Discovery and Introspection](#field-discovery-and-introspection)
   - [GraphQL Schema](#graphql-schema-reference)
   - [Queries](#queries)
   - [Objects](#objects)
   - [Input Types](#input-types)
   - [Scalars](#scalars)

### 7. [Tools and Resources](#tools-and-resources)
   - [AEC Data Model Explorer](#aec-data-model-explorer)
   - [Code Samples](#code-samples)
   - [FAQ](#faq)
   - [Known Limitations](#known-limitations)

### 8. [Change History](#change-history)

---

# Getting Started

## Overview

### About AEC Data Model

The AEC Data Model API enables direct interaction with granular Architecture, Engineering, and Construction (AEC) data in the cloud. This API eliminates the need to build custom plug-ins for desktop authoring tools.

### Common Uses
- Extract and analyze building element data
- Query material properties and specifications
- Generate reports from BIM models
- Integrate with external systems and workflows

### Terms of Service


Access to this functionality is being rolled out and will be available in the account settings for you to enable.

## Prerequisites

Before getting started with the AEC Data Model API, ensure you have:

1. **Autodesk ACC Account**: An active Autodesk Construction Cloud account
2. **API Access**: Enabled API access in your account settings
3. **Authentication**: Valid OAuth2 credentials with appropriate scopes
4. **Data Extraction**: Models successfully extracted to AEC Data Model

## Onboarding

### Activate your ACC Account to extract data to AEC Data Model

If you have an Autodesk Docs subscription, you can enable your ACC account to extract data to AEC Data Model at no additional cost. This functionality is being rolled out and will be available in the account settings.

### Offboarding

When you no longer need access to the AEC Data Model, you can disable the feature through your account settings.

## Quick Start Guide

### Step 1: Register an App
1. Go to the Autodesk Developer Portal
2. Create a new application
3. Configure OAuth2 settings
4. Note your Client ID and Client Secret

### Step 2: Set up Authentication
```javascript
// Required scopes for AEC Data Model API
const scopes = ['data:read', 'data:create', 'data:write'];
```

### Step 3: Make Your First Query

**IMPORTANT: Use the correct endpoint**
```
POST https://developer.api.autodesk.com/aec/graphql
```

```bash
curl -X POST 'https://developer.api.autodesk.com/aec/graphql' \
  -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \
  -H 'Content-Type: application/json' \
  -d '{
    "query": "query GetHubs { hubs { results { name id } } }"
  }'
```

Example GraphQL query:
```graphql
query GetHubs {
  hubs {
    results {
      name
      id
    }
  }
}
```

### Step 4: Explore with AEC Data Model Explorer
Use the interactive browser-based interface to explore and test GraphQL queries before implementing them in your application.

---

# Core Concepts


---

## about-graphql.md

# About GraphQL

## Examples

### Example 1 - Query

### Example 2 - Mutation

> GraphQL is an open-source query language for APIs that was developed by Facebook as an alternative to REST API. It was released to the public in 2015 and hosted by the Linux Foundation at√¢¬Ä¬ØGraphQL.org.

## Code Examples

```
query HeroNameAndFriends { hero { name friends { name } } }
```

```
{"data":{"hero":{"name":"R2-D2","friends":[{"name":"Luke Skywalker"},{"name":"Han Solo"},{"name":"Leia Organa"}]}}}
```

```
mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) { createReview(episode: $ep, review: $review) { stars commentary } } Variables: { "ep":"JEDI", "review":{ "stars":5, "commentary":"This is a great movie!" } }
```

```
{"data":{"createReview":{"stars":5,"commentary":"This is a great movie!"}}}
```

```
query HeroNameAndFriends { hero { name friends { name } } }
```

```
{"data":{"hero":{"name":"R2-D2","friends":[{"name":"Luke Skywalker"},{"name":"Han Solo"},{"name":"Leia Organa"}]}}}
```

```
mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) { createReview(episode: $ep, review: $review) { stars commentary } } Variables: { "ep":"JEDI", "review":{ "stars":5, "commentary":"This is a great movie!" } }
```

```
{"data":{"createReview":{"stars":5,"commentary":"This is a great movie!"}}}
```

## API Constructs

This section defines important data constructs you will encounter in the AEC Data Model API:

### ElementGroup
A collection of related elements, typically representing a single design file (e.g., a Revit model).

### Element
Individual components within an ElementGroup (e.g., walls, doors, windows, materials).

### Property
Attributes and metadata associated with elements (e.g., dimensions, materials, costs).

### Reference
Relationships between elements (e.g., a door's relationship to its type definition).

## API Capabilities

Using the AEC Data Model API, you can perform the following actions:

- **Query Building Elements**: Retrieve walls, doors, windows, and other building components
- **Access Material Data**: Get material properties, specifications, and relationships
- **Extract Geometric Properties**: Access dimensions, areas, volumes, and spatial data
- **Filter and Search**: Use advanced filtering to find specific elements
- **Navigate Relationships**: Follow references between elements and their types
- **Version Management**: Access historical versions of models
- **Aggregate Data**: Generate summaries and reports across multiple models

## Region Support

AEC Data Models are hosted on the Autodesk Construction Cloud (ACC) platform across multiple regions. The following regions are currently supported:

- **US East** (Virginia)
- **US West** (Oregon) 
- **Europe** (Ireland)
- **Asia Pacific** (Sydney)

When querying data, ensure you're connecting to the correct regional endpoint for your data.


---

## capability.md

# API Capabilities

> Using the AEC Data Model API, you can perform the following actions:


---

# API Usage

## Authentication

To access the AEC Data Model API, you need a valid 3-legged OAuth2 access token with the appropriate scopes.

### Required Scopes
```javascript
const scopes = ['data:read', 'data:create', 'data:write'];
```

### Authentication Process
1. Register your application in the Autodesk Developer Portal
2. Implement OAuth2 three-legged authentication flow
3. Include the access token in your API requests

## Endpoints

## üö® ENDPOINT REFERENCE - CRITICAL INFORMATION

### Official AEC Data Model API Endpoint

**THE ONLY CORRECT ENDPOINT:**
```
https://developer.api.autodesk.com/aec/graphql
```

### Complete Request Template

**Always use this exact format:**
```bash
curl -X POST 'https://developer.api.autodesk.com/aec/graphql' \
  -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \
  -H 'Content-Type: application/json' \
  -d '{
    "query": "YOUR_GRAPHQL_QUERY_HERE"
  }'
```

### Endpoint Validation Checklist

‚úÖ **Correct URL:** `https://developer.api.autodesk.com/aec/graphql`
‚úÖ **Method:** POST
‚úÖ **Content-Type:** `application/json`
‚úÖ **Authorization:** `Bearer YOUR_ACCESS_TOKEN`
‚úÖ **Body:** JSON with "query" field

‚ùå **Common Incorrect Endpoints to NEVER use:**
- `https://aps.autodesk.com/graphql`
- `https://api.autodesk.com/graphql`
- `https://aec.autodesk.com/graphql`
- `https://forge.autodesk.com/graphql`
- `https://developer.api.autodesk.com/graphql` (missing /aec/)

### Regional Endpoints (Alternative Options)
- **US East (Primary):** `https://developer.api.autodesk.com/aec/graphql`
- **Europe:** `https://developer.api.autodesk.com/aec/graphql/eu`
- **Asia Pacific:** `https://developer.api.autodesk.com/aec/graphql/ap`

### Programming Language Examples

**JavaScript/Node.js:**
```javascript
const response = await fetch('https://developer.api.autodesk.com/aec/graphql', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${accessToken}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    query: `{ hubs { results { name id } } }`
  })
});
```

**Python:**
```python
import requests

url = 'https://developer.api.autodesk.com/aec/graphql'
headers = {
    'Authorization': f'Bearer {access_token}',
    'Content-Type': 'application/json'
}
data = {
    'query': '{ hubs { results { name id } } }'
}

response = requests.post(url, headers=headers, json=data)
```

**C#:**
```csharp
using (var client = new HttpClient())
{
    client.DefaultRequestHeaders.Authorization = 
        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
    
    var content = new StringContent(
        JsonSerializer.Serialize(new { query = "{ hubs { results { name id } } }" }),
        Encoding.UTF8,
        "application/json"
    );
    
    var response = await client.PostAsync(
        "https://developer.api.autodesk.com/aec/graphql", 
        content
    );
}
```

### Quick Endpoint Test

To verify the endpoint is working, use this test query:
```bash
curl -X POST 'https://developer.api.autodesk.com/aec/graphql' \
  -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \
  -H 'Content-Type: application/json' \
  -d '{"query": "{ __schema { queryType { name } } }"}'
```

Expected response:
```json
{
  "data": {
    "__schema": {
      "queryType": {
        "name": "Query"
      }
    }
  }
}
```

## Making Requests

### Request Format
**Always use POST method to the official endpoint:**

```
POST https://developer.api.autodesk.com/aec/graphql
```

**Required Headers:**
- `Authorization: Bearer YOUR_ACCESS_TOKEN`
- `Content-Type: application/json`

**Complete Request Example:**
```bash
curl -X POST 'https://developer.api.autodesk.com/aec/graphql' \
  -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \
  -H 'Content-Type: application/json' \
  -d '{
    "query": "{ hubs { results { name id } } }"
  }'
```

### Request Body Format
```json
{
  "query": "your GraphQL query here",
  "variables": {
    "variableName": "value"
  },
  "operationName": "OptionalOperationName"
}
```

### Common Request Examples

**Simple Query:**
```bash
curl -X POST 'https://developer.api.autodesk.com/aec/graphql' \
  -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \
  -H 'Content-Type: application/json' \
  -d '{
    "query": "{ hubs { results { name id } } }"
  }'
```

**Query with Variables:**
```bash
curl -X POST 'https://developer.api.autodesk.com/aec/graphql' \
  -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \
  -H 'Content-Type: application/json' \
  -d '{
    "query": "query GetProjects($hubId: ID!) { projects(hubId: $hubId) { results { name id } } }",
    "variables": {
      "hubId": "your-hub-id-here"
    }
  }'
```

### Alternative Content Type
You can also use `application/graphql` content type for simple queries:

```bash
curl -X POST 'https://developer.api.autodesk.com/aec/graphql' \
  -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \
  -H 'Content-Type: application/graphql' \
  -d '{ hubs { results { name id } } }'
```

### JavaScript Example
```javascript
const response = await axios({
  method: 'POST',
  url: 'https://developer.api.autodesk.com/aec/graphql',
  headers: {
    'Authorization': `Bearer ${accessToken}`,
    'Content-Type': 'application/json'
  },
  data: {
    query: `{
      hubs {
        results {
          name
          id
        }
      }
    }`
  }
});
```

### Response Format
```json
{
  "data": {
    "hubs": {
      "results": [
        {"name": "Autodesk-Forge", "id": "urn:adsk.ace:prod.scope:..."},
        {"name": "ACC-Cloud-Team", "id": "urn:adsk.ace:prod.scope:..."}
      ]
    }
  }
}
```

## Rate Limits

The API implements a point-based rate limiting system to ensure fair usage and system stability.

### Rate Limit Structure
- **Point Budget**: 300 points per minute per application
- **Query Point Value**: Each query consumes points based on complexity
- **Maximum Query Points**: 1000 points per single query

### Understanding Point Calculation
Points are calculated based on:
- Number of fields requested
- Pagination limits
- Complexity of filters and relationships

### Rate Limit Headers
Responses include rate limit information in the extensions:

```json
{
  "data": { "..." },
  "extensions": {
    "pointValue": {
      "requestedQueryPointValue": 16
    }
  }
}
```

### Handling Rate Limits
When you exceed the rate limit, you'll receive an error:

```json
{
  "errors": [{
    "message": "Query point value per minute quota exceeded with point value 231 and remaining quota 69. Please try again later.",
    "extensions": {
      "code": "GRAPHQL_VALIDATION_FAILED"
    }
  }]
}
```

### Best Practices
- Monitor your point usage via response extensions
- Implement exponential backoff for rate limit errors
- Use pagination to reduce query complexity
- Cache responses when appropriate

---

# Filtering and Querying

## Standard Filtering

The AEC Data Model API provides a set of standard filtering options to enable filtering expressions as a core capability. They provide a simpler method for applying commonly-used filters, and can be used either as an alternative to or combined with Advanced Filtering (RSQL).

These standard filtering options are available for ElementGroup and Element queries.

### Supported Filter Types

#### Name Filtering
Filter by exact name match:
```json
{
  "filter": {
    "name": "Snowdon Towers East.rvt"
  }
}
```

Filter by multiple names:
```json
{
  "filter": {
    "name": ["Snowdon Towers East.rvt", "Snowdon Towers West.rvt"]
  }
}
```

Filter with text comparison:
```json
{
  "filter": {
    "nameWithComparator": {
      "name": "Pipes",
      "comparator": "CONTAINS"
    }
  }
}
```

#### File URN Filtering
Filter by single file URN:
```json
{
  "filter": {
    "fileUrn": "urn:adsk.wipstg:dm.lineage:u-ncDS7gX3ZhpB3rgZXKeQ"
  }
}
```

Filter by multiple file URNs:
```json
{
  "filter": {
    "fileUrn": [
      "urn:adsk.wipstg:dm.lineage:u-ncDS7gX3ZhpB3rgZXKeQ",
      "urn:adsk.wipstg:dm.lineage:R8YVGN61QDaLElL0YSfkKg"
    ]
  }
}
```

#### Property Filtering
Filter by element properties:
```json
{
  "filter": {
    "properties": [
      {
        "name": "Family Name",
        "value": "Rectangular Mullion"
      },
      {
        "id": "autodesk.revit.parameter:parameter.elementContext-1.0.0",
        "value": "Instance"
      }
    ]
  }
}
```

#### Reference Filtering
Filter by element references:
```json
{
  "filter": {
    "references": {
      "name": "Type",
      "referencedId": "YWVjZX5JR0JWdWROM2QxdW1kTkJZRnR2ZlpBX0wyQ351LW5jRFM3Z1E2R2hwQjNyZ1pYS2VRX2UzPLIz"
    }
  }
}
```

#### User Filtering
Filter by creator:
```json
{
  "filter": {
    "createdBy": "first.last@autodesk.com"
  }
}
```

### Compound Filtering
You can combine multiple filter criteria:
```json
{
  "filter": {
    "fileUrn": "urn:adsk.wipstg:dm.lineage:u-ncDS7gX3ZhpB3rgZXKeQ",
    "createdBy": "first.last@autodesk.com",
    "name": "Snowdon Towers East.rvt"
  }
}
```

## Advanced Filtering (RSQL)

AEC Data Model API's filtering expressions are influenced by the RESTful Service Query Language (RSQL), which is used to define filter expressions to limit the results for REST endpoints.

### Supported Operators
- `==` - Equal to
- `!=` - Not equal to
- `=lt=` - Less than
- `=le=` - Less than or equal to
- `=gt=` - Greater than
- `=ge=` - Greater than or equal to
- `=in=` - In (matches any of the given values)
- `=out=` - Out (does not match any of the given values)

### Compound Operations
- `and` - Logical AND
- `or` - Logical OR
- `()` - Grouping

### RSQL Examples

#### Basic Filtering
```json
{
  "filter": {
    "query": "metadata.fileUrn=='urn:adsk.wipstg:dm.lineage:u-ncDS7gX3ZhpB3rgZXKeQ'"
  }
}
```

#### Compound Filtering
```json
{
  "filter": {
    "query": "metadata.fileUrn=='urn:adsk.wipstg:dm.lineage:u-ncDS7gX3ZhpB3rgZXKeQ' and metadata.createdBy.email=='first.last@autodesk.com'"
  }
}
```

#### Multiple Values
```json
{
  "filter": {
    "query": "metadata.fileUrn=='urn:adsk.wipstg:dm.lineage:u-ncDS7gX3ZhpB3rgZXKeQ' or metadata.fileUrn=='urn:adsk.wipstg:dm.lineage:R8YVGN61QDaLElL0YSfkKg'"
  }
}
```

#### Mixing RSQL with Standard Filters
```json
{
  "filter": {
    "query": "metadata.name=='Snowdon Towers East.rvt'",
    "createdBy": "first.last@autodesk.com"
  }
}
```

### Special Considerations for ElementGroup Filters

#### metadata.fileUrn
When filtering ElementGroups, use `metadata.fileUrn` instead of `fileUrn`:
```json
{
  "filter": {
    "query": "metadata.fileUrn=='urn:adsk.wipstg:dm.lineage:u-ncDS7gX3ZhpB3rgZXKeQ'"
  }
}
```

#### metadata.name
When filtering ElementGroups by name, use `metadata.name`:
```json
{
  "filter": {
    "query": "metadata.name=='Snowdon Towers East.rvt'"
  }
}
```

## metadata.name:

> AEC Data Model API√¢¬Ä¬ôs filtering expressions are influenced by the RESTful Service Query Language (RSQL), which is used to define filter expressions to limit the results for REST endpoints. The√¢¬Ä¬Øfilter√¢¬Ä¬Øquery string parameters used with the AEC Data Model API endpoints require filter expressions similar to RSQL.

## Code Examples

```
{ ..., "filter": { "query": "metadata.fileUrn=='urn:adsk.wipstg:dm.lineage:u-ncDS7gX3ZhpB3rgZXKeQ' or metadata.fileUrn=='urn:adsk.wipstg:dm.lineage:R8YVGN61QDaLElL0YSfkKg'" ... }
```

```
{ ..., "filter": { "query": "metadata.fileUrn=='urn:adsk.wipstg:dm.lineage:u-ncDS7gX3ZhpB3rgZXKeQ' and metadata.createdBy.email=='first.last@autodesk.com'" ... }
```

```
{ ..., "filter": { "query": "metadata.fileUrn=='urn:adsk.wipstg:dm.lineage:u-ncDS7gX3ZhpB3rgZXKeQ'" "createdBy": "first.last@autodesk.com" ... }
```

```
{ ..., "filter": { "query": "metadata.name=='Snowdon Towers East.rvt' and metadata.createdBy.email=='first.last@autodesk.com'" ... }
```

```
{ ..., "filter": { "query": "metadata.name=='Snowdon Towers East.rvt'", "createdBy": "first.last@autodesk.com" ... }
```

```
{ ..., "filter": { "query": "metadata.name=='Snowdon Towers East.rvt'", "name": "Snowdon Towers West.rvt" ... }
```

```
{ ..., "filter": { "query": "metadata.name=='Snowdon Towers East.rvt' or metadata.createdBy.email=='first.last@autodesk.com'" ... }
```

```
{ ..., "filter": { "query": "metadata.fileUrn=='urn:adsk.wipstg:dm.lineage:u-ncDS7gX3ZhpB3rgZXKeQ' or metadata.fileUrn=='urn:adsk.wipstg:dm.lineage:R8YVGN61QDaLElL0YSfkKg'" ... }
```

```
{ ..., "filter": { "query": "metadata.fileUrn=='urn:adsk.wipstg:dm.lineage:u-ncDS7gX3ZhpB3rgZXKeQ' and metadata.createdBy.email=='first.last@autodesk.com'" ... }
```

```
{ ..., "filter": { "query": "metadata.fileUrn=='urn:adsk.wipstg:dm.lineage:u-ncDS7gX3ZhpB3rgZXKeQ'" "createdBy": "first.last@autodesk.com" ... }
```

```
{ ..., "filter": { "query": "metadata.name=='Snowdon Towers East.rvt' and metadata.createdBy.email=='first.last@autodesk.com'" ... }
```

```
{ ..., "filter": { "query": "metadata.name=='Snowdon Towers East.rvt'", "createdBy": "first.last@autodesk.com" ... }
```

```
{ ..., "filter": { "query": "metadata.name=='Snowdon Towers East.rvt'", "name": "Snowdon Towers West.rvt" ... }
```

```
{ ..., "filter": { "query": "metadata.name=='Snowdon Towers East.rvt' or metadata.createdBy.email=='first.last@autodesk.com'" ... }
```


---

## pagination.md

# Pagination

## Step 1: Retrieving the first page

## Step 2: Navigate to the next page using a cursor

## Usage

## Page limit

> Pagination is a technique used to manage and display large datasets by dividing them into smaller and manageable pages. It allows users or applications to navigate through data incrementally, preventing information overload.

## Code Examples

**Initial Request (First Page):**
```graphql
query GetProjects($hubId: ID!) {
  projects(hubId: $hubId, pagination: {limit: 3}) {
    pagination {
      cursor
    }
    results {
      id
      name
      alternativeIdentifiers {
        externalProjectId
      }
    }
  }
}
```

**Variables:**
```json
{
  "hubId": "b.03f98b13-ec95-461b-b945-765f496165c1"
}
```

**Response:**
```json
{
  "data": {
    "projects": {
      "pagination": {
        "cursor": "Y3Vyc34xfjM"
      },
      "results": [
        {
          "id": "YWltcHJvan5iLjAzZjk4YjEzLWVjOTUtNDYxYi1iOTQ1LTc2NWY0OTYxNjVjMX5iLjI1MTg2MzE1LWIyNWMtNDkxMC05MzkxLTllMGE4ZjhmNzA5Zg",
          "name": "JM AEC Data Model Samples",
          "alternativeIdentifiers": {
            "externalProjectId": "b.25186315-b25c-4910-9391-9e0a8f8f709f"
          }
        }
      ]
    }
  }
}
```

**Next Page Request (Using Cursor):**
```graphql
query GetProjects($hubId: ID!) {
  projects(hubId: $hubId, pagination: {cursor: "dXJuOmFkc2sud29ya3NwYWNlOnByb2QucHJvamVjdDo1NjZkOWNiNi0yOTA3LTRhOWQtYWU4OC0zYmI3Y2YyZjE4Yjd-Mw"}) {
    pagination {
      cursor
    }
    results {
      id
      name
      alternativeIdentifiers {
        dataManagementAPIProjectId
      }
    }
  }
}
```


---

## aec-ratelimit.md

# AEC Data Model Rate Limits

## Rate limits

## How to calculate the point value of a query?

## Exceeding the rate limit

## Exceeding the maximum allowed query point

## Knowing the point value of a query

> In order to maintain stability and ensure accessibility of our API to all users, we√¢¬Ä¬ôve implemented certain protection measures on incoming requests to our GraphQL API via rate limits.

## Code Examples

```
{"errors":[{"message":"Query point value per minute quota exceeded with point value 231 and remaining quota 69. Please try again later.","extensions":{"code":"GRAPHQL_VALIDATION_FAILED"}}]}
```

```
{"errors":[{"message":"Query point value 1231 exceeds maximum allowed query point value 1000. To reduce point value, consider setting a lower pagination limit or reducing the number of fields requested.","extensions":{"code":"GRAPHQL_VALIDATION_FAILED"}}]}
```

```
{ { "data": { ... }, "extensions": { "pointValue": { "requestedQueryPointValue": 16 } } } }
```

```
{"errors":[{"message":"Query point value per minute quota exceeded with point value 231 and remaining quota 69. Please try again later.","extensions":{"code":"GRAPHQL_VALIDATION_FAILED"}}]}
```

```
{"errors":[{"message":"Query point value 1231 exceeds maximum allowed query point value 1000. To reduce point value, consider setting a lower pagination limit or reducing the number of fields requested.","extensions":{"code":"GRAPHQL_VALIDATION_FAILED"}}]}
```

```
{ { "data": { ... }, "extensions": { "pointValue": { "requestedQueryPointValue": 16 } } } }
```


---

## about_aecima_data_explorer.md

# About the AEC Data Model Explorer

## Using AEC Data Model Explorer

## User interaction elements

### Explorer panes

### Interactive elements

## Sending queries

## Handling token expiration

> The AEC Data Model Explorer is an interactive browser-based user interface. It is designed for exploring and executing GraphQL queries against the AEC Data Model API. It includes an autocomplete feature, which automatically suggests potential fields as you type a query. The Autodesk AEC Data Model Beta connects to a test ACC Hub with sample Revit Models. A new Viewer option is now available in the latest GraphiQL explorer. This option allows you to preview the model based on the model ID also known as design URN.


---

## knownlimitations.md

# Known Limitations

> There are some known limitations with the AEC Data Model API in the current release.


---

## faq.md

# Frequently Asked Questions

## Why can√¢¬Ä¬ôt I retrieve data from my models using the AEC Data Model APIs?

## Why is filtering elements on some properties not working?

## How to maintain refresh tokens ?

## How to query data from ElementGroups hosted in regions other than the US?

> It is possible that your models were not successfully extracted to the AEC Data Model due to the following reasons:


---

# Tutorials

The following tutorials provide step-by-step guidance for common tasks with the AEC Data Model API. Start with the basic operations if you're new to the API, then progress to more advanced topics.

## Basic Operations

### Prerequisites Checklist

Before starting with the tutorials, ensure you have:

1. **Autodesk ACC Account**: Active account with API access enabled
2. **Registered Application**: OAuth2 app registered in Autodesk Developer Portal
3. **Valid Access Token**: 3-legged OAuth2 token with required scopes
4. **Model Data**: At least one model successfully extracted to AEC Data Model
5. **Development Environment**: Tool for making HTTP requests (curl, Postman, or custom code)

### Tutorial Path

1. **Get Hubs** - Learn to retrieve available hubs
2. **Get Projects** - Access projects within hubs
3. **Navigate Element Groups** - Work with design files
4. **Query Elements** - Retrieve building components
5. **Advanced Filtering** - Complex queries and filtering
6. **Property Management** - Work with element properties and references

> If you are using this API for the first time, we recommend that you configure your environment. For more learning resources, you can see Tutorials.


---

## gethubs.md

# Get Hubs

## Step 1: Request a list of Hubs

### Get Hubs Tutorial

In this guide, you will learn how to retrieve a list of all the hubs you have access to.

**Endpoint:** `POST https://developer.api.autodesk.com/aec/graphql`

**Complete Request:**
```bash
curl -X POST 'https://developer.api.autodesk.com/aec/graphql' \
  -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \
  -H 'Content-Type: application/json' \
  -d '{
    "query": "query GetHubs { hubs { pagination { cursor } results { name id } } }"
  }'
```

**GraphQL Query:**
```graphql
query GetHubs {
  hubs {
    pagination {
      cursor
    }
    results {
      name
      id
    }
  }
}
```

**Response:**
```json
{
  "data": {
    "hubs": {
      "pagination": {
        "cursor": null
      },
      "results": [
        {
          "name": "AEC DM Developer Advocacy Support",
          "id": "urn:adsk.ace:prod.scope:dccde3e3-c20c-40d3-a27c-7ac53b051b6e"
        },
        {
          "name": "Developer Advocacy Support",
          "id": "urn:adsk.ace:prod.scope:c0c44a35-fc67-4a8d-8967-f2d975bc03ec"
        }
      ]
    }
  }
}
```

### Get Projects Tutorial

## Step 1: Request for a list of Projects within a Hub

> In this guide, you will learn how to retrieve a list of all projects available within the hubs you have access to.

## Code Examples

**GraphQL Query:**
```graphql
query GetProjects($hubId: ID!) {
  projects(hubId: $hubId) {
    pagination {
      cursor
    }
    results {
      id
      name
      alternativeIdentifiers {
        dataManagementAPIProjectId
      }
    }
  }
}
```

**Variables:**
```json
{
  "hubId": "urn:adsk.ace:prod.scope:dccde3e3-c20c-40d3-a27c-7ac53b051b6e"
}
```

**Response:**
```json
{
  "data": {
    "projects": {
      "pagination": {
        "cursor": null
      },
      "results": [
        {
          "id": "urn:adsk.workspace:prod.project:39208068-e548-4d9e-b8a7-e000fdf2a9b4",
          "name": "AEC DM Bootcamp Project",
          "alternativeIdentifiers": {
            "dataManagementAPIProjectId": "b.ddcecd34-68b7-41af-ad65-2ce571186c6c"
          }
        }
      ]
    }
  }
}
```


---

## nav-elements.md

# Navigate to ElementGroups within a Project

## Step 1: Request for a list of ElementGroups within a Project

## Step 2: To preview the model

> In this guide, you will learn how to retrieve a list of ElementGroups within a specific project. ElementGroups are collections of elements that can be used to organize and manage data in Autodesk AEC applications.

## Code Examples

**GraphQL Query:**
```graphql
query GetElementGroupsByProject($projectId: ID!) {
  elementGroupsByProject(projectId: $projectId) {
    pagination {
      cursor
    }
    results {
      name
      id
      alternativeIdentifiers {
        fileUrn
        fileVersionUrn
      }
    }
  }
}
```

**Variables:**
```json
{
  "projectId": "urn:adsk.workspace:prod.project:39208068-e548-4d9e-b8a7-e000fdf2a9b4"
}
```

**Response:**
```json
{
  "data": {
    "elementGroupsByProject": {
      "pagination": {
        "cursor": null
      },
      "results": [
        {
          "name": "Snowdon Towers Sample HVAC.rvt",
          "id": "YWVjZH42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35uUVpyS1BEUVJVS0VFOWtmWWNHV0VB",
          "alternativeIdentifiers": {
            "fileUrn": "urn:adsk.wipprod:dm.lineage:nQZrKPDQRUKEE9kfYcGWEA",
            "fileVersionUrn": "urn:adsk.wipprod:fs.file:vf.nQZrKPDQRUKEE9kfYcGWEA?version=1"
          }
        }
      ]
    }
  }
}
```


---

## elementsbycategory.md

# Get Elements from a Category

## Step 1: Request Elements matching the specified classification filter

> In this guide, you will learn how to retrieve elements from a specific category within an ElementGroup. This is useful for filtering elements based on their classification, such as walls, doors, or windows.

## Code Examples

```
query GetElementsFromCategory($elementGroupId: ID!, $propertyFilter: String!) { elementsByElementGroup(elementGroupId: $elementGroupId, filter: {query:$propertyFilter}) { pagination { cursor } results { id name properties { results { name value definition { units{ name } } } } } } }
```

```
{"elementGroupId":"YWVjZH42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVB","propertyFilter":"property.name.category==Walls"}
```

```
{"data":{"elementsByElementGroup":{"pagination":{"cursor":"Y3Vyc341MH41MA"},"results":[{"id":"YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVBXzEwMGMzNw","name":"Generic - 21\"","properties":{"results":[{"name":"Description","value":null,"definition":{"units":null}},{"name":"Manufacturer","value":null,"definition":{"units":null}},{"name":"Model","value":null,"definition":{" ...etc
```


---

## Advanced Query Examples

### Metadata-Based Filtering

**Query ElementGroups by creation date:**
```graphql
query GetRecentElementGroups($hubId: ID!) {
  elementGroupsByHub(
    hubId: $hubId, 
    filter: {query: "metadata.createdOn>2024-05-01T06:37:13.472Z"},
    pagination: {limit: 5}
  ) {
    pagination { cursor }
    results {
      id
      name
      alternativeIdentifiers {
        fileUrn
        fileVersionUrn
      }
    }
  }
}
```

### Distinct Values and Aggregation

**Query distinct property values:**
```graphql
query GetDistinctCategories($elementGroupId: ID!) {
  elementsByElementGroup(elementGroupId: $elementGroupId) {
    results {
      properties {
        results {
          name
          value
        }
      }
    }
  }
}
```

### Complex Property Filtering

**Query elements by multiple property criteria:**
```graphql
query GetFilteredElements($elementGroupId: ID!) {
  elementsByElementGroup(
    elementGroupId: $elementGroupId,
    filter: {query: "property.name.category==Walls AND property.name.material!=null"}
  ) {
    results {
      id
      name
      properties {
        results {
          name
          value
        }
      }
    }
  }
}
```

```
query ($elementGroupId: ID!) { elementGroupAtTip(elementGroupId: $elementGroupId) { id name alternativeIdentifiers { fileUrn fileVersionUrn } versionHistory { versions { results { versionNumber createdOn } } } } }
```

```
{"elementGroupId":"YWVjZH42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVB"}
```

```
{"data":{"elementGroupAtTip":{"id":"YWVjZH42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVB","name":"Snowdon Towers Sample Architectural.rvt","alternativeIdentifiers":{"fileUrn":"urn:adsk.wipprod:dm.lineage:rEdJOCOqR0ekyJBBYlR9EA","fileVersionUrn":"urn:adsk.wipprod:fs.file:vf.rEdJOCOqR0ekyJBBYlR9EA?version=1"},"versionHistory":{"versions":{"results":[{"versionNumber":1,"createdOn" ...etc
```

```
query ($elementGroupId: ID!) { elementGroupAtTip(elementGroupId: $elementGroupId) { id name alternativeIdentifiers { fileUrn fileVersionUrn } versionHistory { versions { results { versionNumber createdOn } } } } }
```

```
{"elementGroupId":"YWVjZH42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVB"}
```

```
{"data":{"elementGroupAtTip":{"id":"YWVjZH42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVB","name":"Snowdon Towers Sample Architectural.rvt","alternativeIdentifiers":{"fileUrn":"urn:adsk.wipprod:dm.lineage:rEdJOCOqR0ekyJBBYlR9EA","fileVersionUrn":"urn:adsk.wipprod:fs.file:vf.rEdJOCOqR0ekyJBBYlR9EA?version=1"},"versionHistory":{"versions":{"results":[{"versionNumber":1,"createdOn" ...etc
```


---

## task3a.md

# Get Element Instances of a Particular Type

## Step 1: Request for a list of elements in an ElementGroup

> In this guide, you will learn how to retrieve all instances of a particular type from a Design at Tip. Additionally, you can request select properties like Area, Volume, etc. of these instances and their type to be returned.
Let us try to retrieve all basic wall instances of the type Foundation - 24\" Concrete from the Snowdon Towers Sample Architecture.rvt.

## Code Examples

```
query ($elementGroupId: ID!, $propertyFilter: String!) { elementsByElementGroup( elementGroupId: $elementGroupId filter: { query: $propertyFilter } pagination: {limit: 5} ) { pagination { cursor } results { id name properties { results { name value } } referencedBy(name: "Type") { pagination { cursor } results { id name alternativeIdentifiers { externalElementId } properties { results { name value } } } } } } }
```

```
{"elementGroupId":"YWVjZH42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVB","propertyFilter":"'property.name.category'=contains=Walls and 'property.name.Element Context'==Type and 'property.name.Element Name'=contains='Foundation - 24'"}
```

```
{"data":{"elementsByElementGroup":{"pagination":{"cursor":null},"results":[{"id":"YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVBXzEyYTFiNQ","name":"Foundation - 24\" Concrete","properties":{"results":[{"name":"Description","value":null},{"name":"Manufacturer","value":null},{"name":"Model","value":null},{"name":"Type Comments","value":null},{"name":"URL","value":null},{"na ...etc
```

```
query ($elementGroupId: ID!, $propertyFilter: String!) { elementsByElementGroup( elementGroupId: $elementGroupId filter: { query: $propertyFilter } pagination: {limit: 5} ) { pagination { cursor } results { id name properties { results { name value } } referencedBy(name: "Type") { pagination { cursor } results { id name alternativeIdentifiers { externalElementId } properties { results { name value } } } } } } }
```

```
{"elementGroupId":"YWVjZH42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVB","propertyFilter":"'property.name.category'=contains=Walls and 'property.name.Element Context'==Type and 'property.name.Element Name'=contains='Foundation - 24'"}
```

```
{"data":{"elementsByElementGroup":{"pagination":{"cursor":null},"results":[{"id":"YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVBXzEyYTFiNQ","name":"Foundation - 24\" Concrete","properties":{"results":[{"name":"Description","value":null},{"name":"Manufacturer","value":null},{"name":"Model","value":null},{"name":"Type Comments","value":null},{"name":"URL","value":null},{"na ...etc
```


---

## task4a.md

# Get Element Instances in a Category by Version

## Step 1: Request elements matching the specified classification filter

> In this guide, you will learn how to retrieve all instances of a particular category from an elementGroup at a specific version. Also, you can request only those instances that match your filter criteria.

## Code Examples

```
query GetWallsElementsByElementGroupIdAtVersion($elementGroupId: ID!, $versionNumber: Int!, $propertyFilter: String!) { elementsByElementGroupAtVersion(elementGroupId: $elementGroupId, versionNumber: $versionNumber, filter: { query: $propertyFilter}, pagination : { limit : 5 }) { pagination { cursor } results { id name properties { results { name value displayValue } } } } }
```

```
{"elementGroupId":"YWVjZH42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVB","versionNumber":1,"propertyFilter":"property.name.category==Walls and 'property.name.Element Context'==Instance"}
```

```
{"data":{"elementsByElementGroupAtVersion":{"pagination":{"cursor":"Y3Vyc341fjU"},"results":[{"id":"YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVBXzEwMTc5NQ","name":"_Not Defined","properties":{"results":[{"name":"Comments","value":null,"displayValue":null},{"name":"Angle","value":0,"displayValue":"0"},{"name":"Angle","value":0,"displayValue":"0"},{"name":"Offset","value" ...etc
```

```
query GetWallsElementsByElementGroupIdAtVersion($elementGroupId: ID!, $versionNumber: Int!, $propertyFilter: String!) { elementsByElementGroupAtVersion(elementGroupId: $elementGroupId, versionNumber: $versionNumber, filter: { query: $propertyFilter}, pagination : { limit : 5 }) { pagination { cursor } results { id name properties { results { name value displayValue } } } } }
```

```
{"elementGroupId":"YWVjZH42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVB","versionNumber":1,"propertyFilter":"property.name.category==Walls and 'property.name.Element Context'==Instance"}
```

```
{"data":{"elementsByElementGroupAtVersion":{"pagination":{"cursor":"Y3Vyc341fjU"},"results":[{"id":"YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVBXzEwMTc5NQ","name":"_Not Defined","properties":{"results":[{"name":"Comments","value":null,"displayValue":null},{"name":"Angle","value":0,"displayValue":"0"},{"name":"Angle","value":0,"displayValue":"0"},{"name":"Offset","value" ...etc
```


---

## task5a.md

# Get Project Elements with Specific Properties

## Step 1: Request Elements Matching the Specified Classification Filter

> In this guide, you will learn how to retrieve elements in a project based on specific properties using the AEC Data Model Explorer. You will retrieve elements that match certain criteria, such as walls with a length rating greater than 10.

## Code Examples

```
query GetElementsInProject($projectId: ID!, $propertyFilter: String!) { elementsByProject(projectId: $projectId, filter: {query: $propertyFilter}) { pagination { cursor } results { id name properties( includeReferencesProperties: "Type" filter: {names: ["Family Name", "Element Name", "Element Context", "Fire Rating"]} ) { results { name value displayValue definition { units{ name } } } } } } }
```

```
{"projectId":"urn:adsk.workspace:prod.project:39208068-e548-4d9e-b8a7-e000fdf2a9b4","propertyFilter":"'property.name.Family Name'=='Basic Wall' and property.name.Length &gt; 10 and 'property.name.Element Context'==Instance"}
```

```
{"data":{"elementsByProject":{"pagination":{"cursor":"YWRjdXJzfjB-NTB-NTA"},"results":[{"id":"YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ340VFVtRnF0WFJVVy1CS09Gb1cyd3FRXzE4NTI4MQ","name":"Generic - 200mm","properties":{"results":[{"name":"Element Name","value":"Generic - 200mm","displayValue":"Generic - 200mm","definition":{"units":null}},{"name":"Family Name","value":"Basic Wall","displayValue":"Ba ...etc
```


---

## task6a.md

# Get Elements by using Instances or Reference

## Step 1: List all Elements Having Concrete Material in a ElementGroup

## Step 2: List Element Instances Having Concrete Material

## Step 3: List Elements having Concrete material by using Reference type

> In this guide, you will learn how to retrieve all elements from all elementGroups within a project. You will also learn how to filter elements based on their materials, by element instances, or by using reference types to fetch specific results that match your criteria.

## Code Examples

```
query GetConcreteMaterials($elementGroupId: ID!, $propertyFilter: String!) { elementsByElementGroup( elementGroupId: $elementGroupId filter: {query: $propertyFilter} pagination: {limit: 20} ) { results { id name } } }
```

```
{"elementGroupId":"YWVjZH42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVB","propertyFilter":"property.name.category==Materials and 'property.name.Element Name'=contains='Concrete'"}
```

```
{"data":{"elementsByElementGroup":{"results":[{"id":"YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVBXzE1Nzc0Mw","name":"Concrete, Precast Smooth, Light Grey"},{"id":"YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVBXzFmYjFhNA","name":"Concrete, Polished"},{"id":"YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ35yRWRKT0NPcVIwZWt5SkJCWWxSOUVBXzQ5ZmI","name":" ...etc
```

```
query GetInstancesOfConcreteMaterial($elementGroupId: ID!, $propertyFilter: String!) { elementsByElementGroup(elementGroupId: $elementGroupId, filter: { query: $propertyFilter}, pagination : { limit : 20 }) { results { id name properties { results { name value } } references{ results{ name displayValue value{ properties{ results{ name value displayValue } } } } } } } }
```

```
{"elementGroupId":"YWVjZH42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ350OU0xX0J3VVRObVllbXRoUVBYNHh3","propertyFilter":"('reference.Structural Material'==YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ350OU0xX0J3VVRObVllbXRoUVBYNHh3XzJkNjE3 or 'reference.Structural Material'==YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ350OU0xX0J3VVRObVllbXRoUVBYNHh3XzJlZA) and 'property.name.Element Context'==Instance"}
```

```
{"data":{"elementsByElementGroup":{"results":[{"id":"YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ350OU0xX0J3VVRObVllbXRoUVBYNHh3XzkzZjc1","name":"CC24x24","properties":{"results":[{"name":"Comments","value":null},{"name":"Has Association","value":false},{"name":"Column Location Mark","value":"D-3"},{"name":"Mark","value":null},{"name":"External ID","value":"e37453ab-55ac-464e-96ef-b2d748a679fc-00093f ...etc
```

```
query GetInstancesOfConcreteMaterial($elementGroupId: ID!, $propertyFilter: String!) { elementsByElementGroup( elementGroupId: $elementGroupId filter: {query: $propertyFilter} pagination: {limit: 20} ) { results { id name referencedBy(name: "Type") { results { id name properties { results { name value } } } } } } }
```

```
{"elementGroupId":"YWVjZH42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ350OU0xX0J3VVRObVllbXRoUVBYNHh3","propertyFilter":"('reference.Structural Material'==YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ350OU0xX0J3VVRObVllbXRoUVBYNHh3XzJkNjE3 or 'reference.Structural Material'==YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ350OU0xX0J3VVRObVllbXRoUVBYNHh3XzJlZA) and 'property.name.Element Context'==Type"}
```

```
{"data":{"elementsByElementGroup":{"results":[{"id":"YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ350OU0xX0J3VVRObVllbXRoUVBYNHh3XzExMTY","name":"Concrete 10","referencedBy":{"results":[{"id":"YWVjZX42SUpGQXdONExWTG5JZXZiQk5GNU1IX0wyQ350OU0xX0J3VVRObVllbXRoUVBYNHh3X2EzOTY3","name":"Concrete 10","properties":{"results":[{"name":"Comments","value":null},{"name":"Has Association","value":false},{"name":" ...etc
```


---

## distinctvaluesquery.md

# Get Distinct Values of Properties

## Step 1: Retrieve distinct values by ID

## Retrieve distinct values by Name

### Vairable examples: Filtering by Categories and Materials

> This page describes how to use the following queries to retrieve distinct values of properties in the AEC Data Model API. These queries enable you to find and retrieve all distinct values of a given property within an element group, either by property definition ID or property name.

## Code Examples

```
query ($elementGroupId: ID!, $propertyDefinitionId: ID!, $filter: ElementFilterInput) { distinctPropertyValuesInElementGroupById(elementGroupId: $elementGroupId, propertyDefinitionId: $propertyDefinitionId, filter: $filter) { values(limit: 200) { value, count } } }
```

```
{"elementGroupId":"YWVjZH5JR0JWdWROM2QxdW1kTkJZRnR2ZlpBX0wyQ35GZGhKOWZxZFJSR2QxTXAwNU1RWkVR","propertyDefinitionId":"autodesk.revit.parameter:parameter.category-2.0.0"}
```

```
"values": [ { "value": "Curtain Wall Mullions", "count": 2372 }, { "value": "Analytical Nodes", "count": 1410 } ]
```

```
query ($elementGroupId: ID!, $name: String!, $filter: ElementFilterInput, $pagination: PaginationInput) { distinctPropertyValuesInElementGroupByName(elementGroupId: $elementGroupId, name: $name, filter: $filter, pagination: $pagination) { pagination { cursor } results { definition { id } values(limit: 200) { value count } } } }
```

```
{"elementGroupId":"YWVjZH5JR0JWdWROM2QxdW1kTkJZRnR2ZlpBX0wyQ35GZGhKOWZxZFJSR2QxTXAwNU1RWkVR","name":"Length"}
```

```
"results": [ { "definition": { "id": "autodesk.revit.parameter:structuralFoundationLength-2.0.0", }, "values": [ { "value": "1.93546015625", "count": 5 }, { "value": "1.0947796875000002", "count": 1 } ] }, { "definition": { "id": "autodesk.revit.parameter:continuousrailEndExtensionLengthParam-2.0.0", }, "values": [ { "value": "3.0463569792873577", "count": 1 } ] } }
```

```
{"elementGroupId":"YWVjZH5JR0JWdWROM2QxdW1kTkJZRnR2ZlpBX0wyQ35GZGhKOWZxZFJSR2QxTXAwNU1RWkVR","name":"Family Name","filter":{"query":"property.name.category==Doors"}}
```

```
{"elementGroupId":"YWVjZH5JR0JWdWROM2QxdW1kTkJZRnR2ZlpBX0wyQ35GZGhKOWZxZFJSR2QxTXAwNU1RWkVR","name":"Type","filter":{"query":"'property.name.Family Name'=='Single'"}}
```

```
{"elementGroupId":"YWVjZH5JR0JWdWROM2QxdW1kTkJZRnR2ZlpBX0wyQ35GZGhKOWZxZFJSR2QxTXAwNU1RWkVR","name":"Structural Material","filter":{"query":"property.name.category==Walls"}}
```

```
{ "elementGroupId": "YWVjZH5JR0JWdWROM2QxdW1kTkJZRnR2ZlpBX0wyQ35GZGhKOWZxZFJSR2QxTXAwNU1RWkVR", "name": "Width", "filter": { "query" : "property.name.category==Doors", "properties" { "name": "Width", "valueWithComparator": { "value": "0.9", "comparator": "LESS_THAN" } } } }
```


---

## ElementGroupValidation.md

# Elementgroup Validation Sample Workflow

## Before You Begin

## Setting up the Application

## Running the Sample

## Workflow Description

> Validating data property names, units, and types used across elementgroups in a project is a valuable QA/QC process.
This sample automates this task using the AEC Data Model APIs.

## Code Examples

```
git clone https://github.com/autodesk-platform-services/aps-aecdatamodel-samples.git
```

```
Define the following environment variables: Mac OSX/Linux (Terminal) dotnet restore export APS_CLIENT_ID=&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; export APS_CLIENT_SECRET=&lt;&lt;YOUR CLIENT SECRET&gt;&gt; export APS_CALLBACK_URL=http://localhost:8080/api/auth/callback Windows dotnet restore set APS_CLIENT_ID =&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; set APS_CLIENT_SECRET =&lt;&lt;YOUR CLIENT SECRET&gt;&gt; set APS_CALLBACK_URL=http://localhost:8080/api/auth/callback
```

```
dotnet run
```

```
elementGroupsByProject(projectId: $projectId) { pagination{ pageSize cursor } results{ name id propertyDefinitions{ results{ id name description specification } } } }
```

```
elementGroupsByProject(projectId: $projectId, pagination:{cursor:"cursor string here"}) { pagination{ pageSize cursor } results{ name id propertyDefinitions{ results{ id name description specification } } } }
```

```
{ projectId = "Your project ID" }
```

```
Define the following environment variables: Mac OSX/Linux (Terminal) dotnet restore export APS_CLIENT_ID=&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; export APS_CLIENT_SECRET=&lt;&lt;YOUR CLIENT SECRET&gt;&gt; export APS_CALLBACK_URL=http://localhost:8080/api/auth/callback Windows dotnet restore set APS_CLIENT_ID =&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; set APS_CLIENT_SECRET =&lt;&lt;YOUR CLIENT SECRET&gt;&gt; set APS_CALLBACK_URL=http://localhost:8080/api/auth/callback
```

```
elementGroupsByProject(projectId: $projectId) { pagination{ pageSize cursor } results{ name id propertyDefinitions{ results{ id name description specification } } } }
```

```
elementGroupsByProject(projectId: $projectId, pagination:{cursor:"cursor string here"}) { pagination{ pageSize cursor } results{ name id propertyDefinitions{ results{ id name description specification } } } }
```

```
{ projectId = "Your project ID" }
```


---

## quantitytakeoff.md

# Quantity Takeoff Sample Workflow

## Before You Begin

## Setting up the Application

## Running the Sample

## Workflow Description

> This sample allows you to build a quantity takeoff for √¢¬Ä¬òDoors√¢¬Ä¬ô. You will fetch all elements filtered by classification √¢¬Ä¬òDoors√¢¬Ä¬ô.

## Code Examples

```
git clone https://github.com/autodesk-platform-services/aps-aecdatamodel-samples.git
```

```
Define the following environment variables: Mac OSX/Linux (Terminal) dotnet restore export APS_CLIENT_ID=&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; export APS_CLIENT_SECRET=&lt;&lt;YOUR CLIENT SECRET&gt;&gt; export APS_CALLBACK_URL=http://localhost:8080/api/auth/callback Windows dotnet restore set APS_CLIENT_ID =&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; set APS_CLIENT_SECRET =&lt;&lt;YOUR CLIENT SECRET&gt;&gt; set APS_CALLBACK_URL=http://localhost:8080/api/auth/callback
```

```
dotnet run
```

```
query getQuantityTakeoff ($elementGroupId: ID!, $elementsfilter: String!){ elementsByElementGroup(elementGroupId: $elementGroupId, filter: { query: $elementsfilter}) { pagination{ pageSize cursor } results{ id name } } }
```

```
query getQuantityTakeoff ($elementGroupId: ID!, $elementsfilter: String!){ elementsByElementGroup(elementGroupId: $elementGroupId, filter: { query: $elementsfilter}, pagination:{cursor:"cursor"}) { pagination{ pageSize cursor } results{ id name } } }
```

```
{ elementGroupId = elementGroupId, elementsfilter = elementsfilter }
```

```
Define the following environment variables: Mac OSX/Linux (Terminal) dotnet restore export APS_CLIENT_ID=&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; export APS_CLIENT_SECRET=&lt;&lt;YOUR CLIENT SECRET&gt;&gt; export APS_CALLBACK_URL=http://localhost:8080/api/auth/callback Windows dotnet restore set APS_CLIENT_ID =&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; set APS_CLIENT_SECRET =&lt;&lt;YOUR CLIENT SECRET&gt;&gt; set APS_CALLBACK_URL=http://localhost:8080/api/auth/callback
```

```
query getQuantityTakeoff ($elementGroupId: ID!, $elementsfilter: String!){ elementsByElementGroup(elementGroupId: $elementGroupId, filter: { query: $elementsfilter}) { pagination{ pageSize cursor } results{ id name } } }
```

```
query getQuantityTakeoff ($elementGroupId: ID!, $elementsfilter: String!){ elementsByElementGroup(elementGroupId: $elementGroupId, filter: { query: $elementsfilter}, pagination:{cursor:"cursor"}) { pagination{ pageSize cursor } results{ id name } } }
```

```
{ elementGroupId = elementGroupId, elementsfilter = elementsfilter }
```


---

## schedule.md

# Window Schedule Sample Workflow

## Before You Begin

## Setting up the Application

## Running the Sample

## Workflow Description

> A schedule is typically used to identify, in most cases a chart or table providing descriptions of the windows , doors, finishes, lintels, footings, piers, etc. on a construction project. Let√¢¬Ä¬ôs take the same sample model and imagine that you would like to build a window schedule. You will need to retrieve properties like panel glazing, glass, frame material, height, width, etc. of all Elementgroups entity instances of category windows.

## Code Examples

```
git clone https://github.com/autodesk-platform-services/aps-aecdatamodel-samples.git
```

```
Define the following environment variables: Mac OSX/Linux (Terminal) dotnet restore export APS_CLIENT_ID=&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; export APS_CLIENT_SECRET=&lt;&lt;YOUR CLIENT SECRET&gt;&gt; export APS_CALLBACK_URL=http://localhost:8080/api/auth/callback Windows dotnet restore set APS_CLIENT_ID =&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; set APS_CLIENT_SECRET =&lt;&lt;YOUR CLIENT SECRET&gt;&gt; set APS_CALLBACK_URL=http://localhost:8080/api/auth/callback
```

```
dotnet run
```

```
query GetSchedule($elementGroupId: ID!, $elementsfilter: String!){ elementsByElementGroup(elementGroupId: $elementGroupId,filter: { query: $elementsfilter}){ pagination{ pageSize cursor } results{ id name properties{ results{ name value displayValue propertyDefinition{ units } } } references{ results{ name value{ properties{ results{ name value displayValue definition{ units{ name } } } } } } } } } }
```

```
query GetSchedule($elementGroupId: ID!, $elementsfilter: String!){ elementsByElementGroup(elementGroupId: $elementGroupId,filter: { query: $elementsfilter}, pagination:{cursor:"cursor"}){ pagination{ pageSize cursor } results{ id name properties{ results{ name value displayValue definition{ units{ name } } } } references{ results{ name value{ properties{ results{ name value displayValue definition{ units{ name } } } } } } } } } }
```

```
{ elementGroupId = elementGroupId, elementsfilter = elementsfilter }
```

```
Define the following environment variables: Mac OSX/Linux (Terminal) dotnet restore export APS_CLIENT_ID=&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; export APS_CLIENT_SECRET=&lt;&lt;YOUR CLIENT SECRET&gt;&gt; export APS_CALLBACK_URL=http://localhost:8080/api/auth/callback Windows dotnet restore set APS_CLIENT_ID =&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; set APS_CLIENT_SECRET =&lt;&lt;YOUR CLIENT SECRET&gt;&gt; set APS_CALLBACK_URL=http://localhost:8080/api/auth/callback
```

```
query GetSchedule($elementGroupId: ID!, $elementsfilter: String!){ elementsByElementGroup(elementGroupId: $elementGroupId,filter: { query: $elementsfilter}){ pagination{ pageSize cursor } results{ id name properties{ results{ name value displayValue propertyDefinition{ units } } } references{ results{ name value{ properties{ results{ name value displayValue definition{ units{ name } } } } } } } } } }
```

```
query GetSchedule($elementGroupId: ID!, $elementsfilter: String!){ elementsByElementGroup(elementGroupId: $elementGroupId,filter: { query: $elementsfilter}, pagination:{cursor:"cursor"}){ pagination{ pageSize cursor } results{ id name properties{ results{ name value displayValue definition{ units{ name } } } } references{ results{ name value{ properties{ results{ name value displayValue definition{ units{ name } } } } } } } } } }
```

```
{ elementGroupId = elementGroupId, elementsfilter = elementsfilter }
```


---

## ProcurementDashboard.md

# Furniture Procurement Dashboard Sample Workflow

## Before You Begin

## Setting up the Application

## Running the Sample

## Workflow Description

> Obtaining furniture procurement data can help building managers make more informed decisions about budgeting, maintenance, compliance, and planning, which can ultimately lead to a more efficient and effective use of resources.

## Code Examples

```
git clone https://github.com/autodesk-platform-services/aps-aecdatamodel-samples.git
```

```
Define the following environment variables: Mac OSX/Linux (Terminal) dotnet restore export APS_CLIENT_ID=&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; export APS_CLIENT_SECRET=&lt;&lt;YOUR CLIENT SECRET&gt;&gt; export APS_CALLBACK_URL=http://localhost:8080/api/auth/callback Windows dotnet restore set APS_CLIENT_ID =&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; set APS_CLIENT_SECRET =&lt;&lt;YOUR CLIENT SECRET&gt;&gt; set APS_CALLBACK_URL=http://localhost:8080/api/auth/callback
```

```
dotnet run
```

```
``` query GetFurnitureProcurement($elementGroupId: ID!, $elementsfilter: String!, $referencefilter: String!) { elements(elementGroupId: $elementGroupId, filter: { query: $elementsfilter}) { pagination { pageSize cursor } results { id name properties (filter: {names: ["Element Name"]}){ results { name value } } referencedBy (name: "Level", filter: { query: $referencefilter}) { results { name properties (filter: {names: [""Family Name"", ""Element Name""]}) { results { name value } } } } } } } ```
```

```
``` query GetFurnitureProcurement($elementGroupId: ID!, $elementsfilter: String!, $referencefilter: String!) { elements(elementGroupId: $elementGroupId, filter: { query: $elementsfilter}, pagination:{cursor:"cursor string here"}) { pagination { pageSize cursor } results { id name properties (filter: {names: ["Element Name"]}){ results { name value } } referencedBy (name: "Level", filter: { query: $referencefilter}) { results { name properties (filter: {names: [""Family Name"", ""Element Name""]}) { results { name value } } } } } } } ```
```

```
``` { elementGroupId = "Your elementGroup ID", elementsfilter = elementsfilter, referencefilter = referencefilter } ```
```

```
Define the following environment variables: Mac OSX/Linux (Terminal) dotnet restore export APS_CLIENT_ID=&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; export APS_CLIENT_SECRET=&lt;&lt;YOUR CLIENT SECRET&gt;&gt; export APS_CALLBACK_URL=http://localhost:8080/api/auth/callback Windows dotnet restore set APS_CLIENT_ID =&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; set APS_CLIENT_SECRET =&lt;&lt;YOUR CLIENT SECRET&gt;&gt; set APS_CALLBACK_URL=http://localhost:8080/api/auth/callback
```

```
``` query GetFurnitureProcurement($elementGroupId: ID!, $elementsfilter: String!, $referencefilter: String!) { elements(elementGroupId: $elementGroupId, filter: { query: $elementsfilter}) { pagination { pageSize cursor } results { id name properties (filter: {names: ["Element Name"]}){ results { name value } } referencedBy (name: "Level", filter: { query: $referencefilter}) { results { name properties (filter: {names: [""Family Name"", ""Element Name""]}) { results { name value } } } } } } }
```

```
``` query GetFurnitureProcurement($elementGroupId: ID!, $elementsfilter: String!, $referencefilter: String!) { elements(elementGroupId: $elementGroupId, filter: { query: $elementsfilter}, pagination:{cursor:"cursor string here"}) { pagination { pageSize cursor } results { id name properties (filter: {names: ["Element Name"]}){ results { name value } } referencedBy (name: "Level", filter: { query: $referencefilter}) { results { name properties (filter: {names: [""Family Name"", ""Element Name""]}) { results { name value } } } } } } } ```
```

```
``` { elementGroupId = "Your elementGroup ID", elementsfilter = elementsfilter, referencefilter = referencefilter } ```
```


---

## CompareVersions.md

# Compare Elementgroups Sample Workflow

## Before You Begin

## Setting up the Application

## Running the Sample

## Workflow Description

> Comparing elementgroups can help architects and designers create more effective and functional buildings that meet the needs of their clients and occupants. By evaluating different options and approaches, they can find innovative solutions and create unique and inspiring spaces.

## Code Examples

```
git clone https://github.com/autodesk-platform-services/aps-aecdatamodel-samples.git
```

```
Define the following environment variables: Mac OSX/Linux (Terminal) dotnet restore export APS_CLIENT_ID=&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; export APS_CLIENT_SECRET=&lt;&lt;YOUR CLIENT SECRET&gt;&gt; export APS_CALLBACK_URL=http://localhost:8080/api/auth/callback Windows dotnet restore set APS_CLIENT_ID =&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; set APS_CLIENT_SECRET =&lt;&lt;YOUR CLIENT SECRET&gt;&gt; set APS_CALLBACK_URL=http://localhost:8080/api/auth/callback
```

```
dotnet run
```

```
query getVersionProperties($elementGroupId: ID!, $versionNumber: Int!){ elementGroupByVersionNumber(elementGroupId:$elementGroupId , versionNumber:$versionNumber ){ name elements{ pagination{ pageSize cursor } results{ id name properties{ results{ name value definition{ id name units{ name } } } } } } } }
```

```
query getVersionProperties($elementGroupId: ID!, $versionNumber: Int!){ elementGroupByVersionNumber(elementGroupId:$elementGroupId , versionNumber:$versionNumber , pagination:{cursor:"cursor"}){ name elements{ pagination{ pageSize cursor } results{ id name properties{ results{ name value definition{ id name units{ name } } } } } } } }
```

```
{ elementGroupId = elementGroupId, elementsfilter = elementsfilter, referencefilter = referencefilter }
```

```
Define the following environment variables: Mac OSX/Linux (Terminal) dotnet restore export APS_CLIENT_ID=&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; export APS_CLIENT_SECRET=&lt;&lt;YOUR CLIENT SECRET&gt;&gt; export APS_CALLBACK_URL=http://localhost:8080/api/auth/callback Windows dotnet restore set APS_CLIENT_ID =&lt;&lt;YOUR CLIENT ID FROM DEVELOPER PORTAL&gt;&gt; set APS_CLIENT_SECRET =&lt;&lt;YOUR CLIENT SECRET&gt;&gt; set APS_CALLBACK_URL=http://localhost:8080/api/auth/callback
```

```
query getVersionProperties($elementGroupId: ID!, $versionNumber: Int!){ elementGroupByVersionNumber(elementGroupId:$elementGroupId , versionNumber:$versionNumber ){ name elements{ pagination{ pageSize cursor } results{ id name properties{ results{ name value definition{ id name units{ name } } } } } } } }
```

```
query getVersionProperties($elementGroupId: ID!, $versionNumber: Int!){ elementGroupByVersionNumber(elementGroupId:$elementGroupId , versionNumber:$versionNumber , pagination:{cursor:"cursor"}){ name elements{ pagination{ pageSize cursor } results{ id name properties{ results{ name value definition{ id name units{ name } } } } } } } }
```

```
{ elementGroupId = elementGroupId, elementsfilter = elementsfilter, referencefilter = referencefilter }
```


---

## graphqlendpoint.md

# aec/graphql

## Resource Information

### Request

## Headers

### Request

## Body Structure

## Example 1

### Request

### Response

## Example 2

### Request

### Response

## Example 3

### Request

### Response

> Sends GraphQL requests to AEC Data Model GraphQL service and returns responses in the JSON format.

## Code Examples

**cURL Example:**
```bash
curl -v 'https://developer.api.autodesk.com/aec/graphql' \
  -X 'POST' \
  -H 'Authorization: Bearer AuIPTf4KYLTYGVnOHQ0cuolwCW2a...' \
  -H 'Content-Type: application/json' \
  -d '{
    "query": "query GetProjects($hubId: String!) { projects(hubId: $hubId) { results { id name } } }",
    "variables": {
      "hubId": "a.YnVzaW5lc3M6YXV0b2Rlc2syMDA2"
      

       }
  }'
```

**Response:**
```json
{
  "data": {
    "projects": {
      "results": [
        {
          "id": "a.YnVzaW5lc3M6YXV0b2Rlc2syMDM5I0QyMDIyMDEzMTUwMzg3NDE5",
          "name": "Default Project"
        },
        {
          "id": "a.YnVzaW5lc3M6YXV0b2Rlc2syMDM5I0QyMDIyMDEzMTUwMzg3NDQ0",
          "name": "Admin Project"
        },
        {
          "id": "a.YnVzaW5lc3M6YXV0b2Rlc2syMDM5I0QyMDIyMDEzMTUwMzg3NDY5",
          "name": "Assets"
        }
      ]
    }
  }
}
```

**JavaScript (Axios) Example:**
```javascript
axios({
  method: 'POST',
  url: 'https://developer.api.autodesk.com/aec/graphql',
  data: {
    query: `{
      hubs {
        results {
          name
        }
      }
    }`
  }
})
```

**Response:**
```json
{
  "data": {
    "hubs": {
      "results": [
        {
          "id": "a.YnVzaW5lc3M6YXV0b2Rlc2s2MTA0",
          "name": "L2-Forge-Data-Team"
        },
        {
          "id": "a.YnVzaW5lc3M6YXV0b2Rlc2s0NTA5",
          "name": "Michelangelo's Playground"
        }
      ]
    }
  }
}
```

**C# Example:**
```csharp
static async Task getHubs() {
  var clientHandler = new HttpClientHandler();
  var client = new HttpClient(clientHandler);
  var request = new HttpRequestMessage {
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://developer.api.autodesk.com/aec/graphql"),
    Headers = {
      { "Authorization", "Bearer <<YOUR TOKEN HERE>>" }
    },
    Content = new StringContent(
        JsonSerializer.Serialize(new { query = "{ hubs { results { name id } } }" }),
        Encoding.UTF8,
        "application/json"
    );
    
    var response = await client.PostAsync(
        "https://developer.api.autodesk.com/aec/graphql", 
        content
    );
}
```

**Response:**
```json
{
  "data": {
    "hubs": {
      "pagination": {
        "cursor": null
      },
      "results": [
        {
          "name": "JM Test",
          "id": "a.YnVzaW5lc3M6YXV0b2Rlc2s1ODcy"
        },
        {
          "name": "AEC Data Model Account",
          "id": "b.03f98b13-ec95-461b-b945-765f496165c1"
        },
        {
          "name": "Developer Advocacy Support",
          "id": "b.489c5e7a-c6c0-4212-81f3-3529a621210b"
        },
        {
          "name": "Construction Records Testing",
          "id": "b.768cae14-76b3-4531-9030-25212dab4e48"
        }
      ]
    }
  }
}
```


---

## project.md

# project

## Arguments

## Possible Returns

## Examples

### Example 1

## Code Examples

```
query GetProject($projectId: ID!) { project(projectId: $projectId) { # Project Fields } }
```

```
{"projectId":"&lt;SOME-ID-TYPE-SCALAR-VALUE&gt;"}
```

```
query GetProject($projectId: ID!) { project (projectId: $projectId) { id name folders { results { id name objectCount } } } }
```

```
{"projectId":"YWltcHJvan5iLmU0ZmJkMzE1LTJkYzUtNDAyNi04Y2EzLTgwZjA5ZDI0ZmY0Mn5iLjdhZGJmOWZkLWRlYmItNDI5Yy1iZmU1LTMyYTNjMjJjMDY5NQ"}
```

```
{"data":{"project":{"id":"YWltcHJvan5iLmU0ZmJkMzE1LTJkYzUtNDAyNi04Y2EzLTgwZjA5ZDI0ZmY0Mn5iLjdhZGJmOWZkLWRlYmItNDI5Yy1iZmU1LTMyYTNjMjJjMDY5NQ","name":"AEC Design AIM STG  ","folders":{"results":[{"id":"Zm9sZH5iLmU0ZmJkMzE1LTJkYzUtNDAyNi04Y2EzLTgwZjA5ZDI0ZmY0Mn5iLjdhZGJmOWZkLWRlYmItNDI5Yy1iZmU1LTMyYTNjMjJjMDY5NX51cm46YWRzay53aXBzdGc6ZnMuZm9sZGVyOmNvLlhvSG9RY3pHUm9LczVZRm4yUDNpWlE","name":"Project Fi ...etc
```

```
query GetProject($projectId: ID!) { project(projectId: $projectId) { # Project Fields } }
```

```
{"projectId":"&lt;SOME-ID-TYPE-SCALAR-VALUE&gt;"}
```

```
query GetProject($projectId: ID!) { project (projectId: $projectId) { id name folders { results { id name objectCount } } } }
```

```
{"projectId":"YWltcHJvan5iLmU0ZmJkMzE1LTJkYzUtNDAyNi04Y2EzLTgwZjA5ZDI0ZmY0Mn5iLjdhZGJmOWZkLWRlYmItNDI5Yy1iZmU1LTMyYTNjMjJjMDY5NQ"}
```

```
{"data":{"project":{"id":"YWltcHJvan5iLmU0ZmJkMzE1LTJkYzUtNDAyNi04Y2EzLTgwZjA5ZDI0ZmY0Mn5iLjdhZGJmOWZkLWRlYmItNDI5Yy1iZmU1LTMyYTNjMjJjMDY5NQ","name":"AEC Design AIM STG  ","folders":{"results":[{"id":"Zm9sZH5iLmU0ZmJkMzE1LTJkYzUtNDAyNi04Y2EzLTgwZjA5ZDI0ZmY0Mn5iLjdhZGJmOWZkLWRlYmItNDI5Yy1iZmU1LTMyYTNjMjJjMDY5NX51cm46YWRzay53aXBzdGc6ZnMuZm9sZGVyOmNvLlhvSG9RY3pHUm9LczVZRm4yUDNpWlE","name":"Project Fi ...etc
```


---

## projects.md

# projects

## Arguments

## Possible Returns

## Examples

### Example 1

## Code Examples

**Generic Query:**
```graphql
query GetProjects($hubId: ID!, $filter: ProjectFilterInput, $pagination: PaginationInput) {
  projects(hubId: $hubId, filter: $filter, pagination: $pagination) {
    # Projects Fields
  }
}
```

**Variables:**
```json
{
  "hubId": "<SOME-ID-TYPE-SCALAR-VALUE>",
  "filter": "<SOME-PROJECTFILTER-INPUT-TYPE-VALUE>",
  "pagination": "<SOME-PAGINATION-INPUT-TYPE-VALUE>"
}
```

**Specific Query Example:**
```graphql
query GetProjects($hubId: String!) {
  projects(hubId: $hubId) {
    results {
      name
      id
      hub {
        id
        name
      }
    }
  }
}
```

**Variables:**
```json
{
  "hubId": "b.5c07c84c-bbd9-476e-8712-547f74c5b76b"
}
```

**Response:**
```json
{
  "data": {
    "projects": {
      "results": [
        {
          "id": "YWltcHJvan5iLmU0ZmJkMzE1LTJkYzUtNDAyNi04Y2EzLTgwZjA5ZDI0ZmY0Mn5iLjdhZGJmOWZkLWRlYmItNDI5Yy1iZmU1LTMyYTNjMjJjMDY5NQ",
          "name": "AEC Design AIM STG",
          "hub": {
            "id": "b.e4fbd315-2dc5-4026-8ca3-80f09d24ff42",
            "name": "Revit Nexus"
          }
        }
      ]
    }
  }
}
```
---

## Final Endpoint Reminder

### üö® ALWAYS USE THE CORRECT ENDPOINT

**Correct Endpoint:**
```
https://developer.api.autodesk.com/aec/graphql
```

**Complete Request Template:**
```bash
curl -X POST 'https://developer.api.autodesk.com/aec/graphql' \
  -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \
  -H 'Content-Type: application/json' \
  -d '{"query": "YOUR_GRAPHQL_QUERY"}'
```

**Key Points:**
- Always use POST method
- Always include `Authorization: Bearer YOUR_ACCESS_TOKEN` header
- Always use `Content-Type: application/json` header
- Always send JSON body with "query" field
- Never use any other endpoint variations

### Support and Resources

- **Official Documentation**: [Autodesk Developer Portal](https://aps.autodesk.com/)
- **API Status**: Monitor service status and updates
- **Community Forums**: Connect with other developers
- **Sample Code**: Complete working examples available on GitHub

---

*Document Version: 2.1*  
*Last Updated: 2025-01-08*
*Endpoint: https://developer.api.autodesk.com/aec/graphql*

